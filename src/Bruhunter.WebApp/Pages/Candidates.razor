@page "/candidates"
@using System.Net.Http.Headers
@using Bruhunter.WebApp.Pages
@namespace Bruhunter.Shared.Documents

@inject HttpClient Http
@inject IJSRuntime JsRuntime

<h1>Витрина кандидатов</h1>

<p></p>

<label>Введите имя:</label>
<input @bind="name" />
<br>
<label>Введите фамилию:</label>
<input @bind="lastName" />
<br>
<button @onclick="AddCandidate">Добавить нового кандидата</button>

@if (candidates == null)
{
    <p><em>Нет данных о кандидатах</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Имя</th>
                <th>Фамилия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var candidate in candidates)
            {
                <tr>
                    <td>@candidate.FirstName</td>
                    <td>@candidate.SecondName</td>
                    <td><button @onclick="@(() => ShowEditCandidate(candidate))" class="btn btn-primary">Изменить</button></td>
                    <td><button @onclick="@(e => DeleteCandidate(candidate.Id))">Удалить</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    List<CandidateDocument> candidates;
    private string name;
    private string lastName;

    protected override async Task OnInitializedAsync()
    {
        await LoadCandidates();
    }

    private async Task AddCandidate()
    {
        if (name == null || lastName == null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Заполните все поля.");
        }
        else
        {
            var candidateDocument = new CandidateDocument
                {
                    FirstName = name,
                    SecondName = lastName
                };
            name = null;
            lastName = null;

            var jsonContent = JsonContent.Create(candidateDocument, new MediaTypeHeaderValue("application/json"));
            await Http.PostAsync("api/candidates", jsonContent);

            await LoadCandidates();
        }
    }

    private async Task LoadCandidates()
    {
        candidates = await Http.GetFromJsonAsync<List<CandidateDocument>>("api/candidates/query");
    }

    private async Task DeleteCandidate(Guid id)
    {
        await Http.DeleteAsync("api/candidates/" + id);
        await LoadCandidates();
    }

    [CascadingParameter] public IModalService Modal { get; set; }

    async Task ShowEditCandidate(CandidateDocument candidateDocument)
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(EditCandidateModal.candidateDocument), candidateDocument);

        var candidateModal = Modal.Show<EditCandidateModal>("Изменение кандидата", parameters);

        var result = await candidateModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            await LoadCandidates();
        }
    }
}
