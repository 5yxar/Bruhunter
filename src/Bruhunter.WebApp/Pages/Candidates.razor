@page "/candidates"
@using System.Net.Http.Headers
@using System.Net.Http.Json
@namespace Bruhunter.Shared.Documents

@inject HttpClient Http

<h1>Витрина кандидатов</h1>

<p></p>

<label>Введите имя:</label>
<input @bind="name"/><br>
<label>Введите фамилию:</label>
<input @bind="lastName"/><br>
<button @onclick="AddCandidate">Добавить нового кандидата</button>

@if (candidates.Count == 0)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>First Name</th>
                <th>SecondName</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var candidate in candidates)
            {
                <tr>
                    <td>@candidate.Id</td>
                    <td>@candidate.FirstName</td>
                    <td>@candidate.SecondName</td>
                    <button @onclick="DeleteCandidate">Click</button>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    private string name;
    private string lastName;
    private int id;
    List<CandidateDocument> candidates;

    public async void AddCandidate()
    {
        CandidateDocument candidateDocument = new CandidateDocument();
        candidateDocument.FirstName = name;
        candidateDocument.SecondName = lastName;
        candidateDocument.Id = Guid.NewGuid();
        //candidates.Add(candidateDocument);

        JsonContent jsonContent = JsonContent.Create(candidateDocument);
        jsonContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");

        await Http.PostAsync("api/candidates",jsonContent);
            
    }
    public async void DeleteCandidate()
    {
        //await Http.DeleteAsync("api/candidates/" + id);
    }

    protected override async Task OnInitializedAsync()
    {
        //candidates = await Http.GetFromJsonAsync("api/candidates/query");
    }
}
