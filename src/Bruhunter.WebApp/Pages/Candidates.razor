@page "/candidates"
@using System.Net.Http.Headers
@using System.Net.Http.Json
@namespace Bruhunter.Shared.Documents

@inject HttpClient Http
@inject IJSRuntime JsRuntime

<h1>Витрина кандидатов</h1>

<p></p>

<label>Введите имя:</label>
<input @bind="name" />
<br>
<label>Введите фамилию:</label>
<input @bind="lastName" />
<br>
<button @onclick="AddCandidate">Добавить нового кандидата</button>

@if (candidates.Count == 0)
{
    <p><em>Нет данных о кандидатах</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>First Name</th>
                <th>SecondName</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var candidate in candidates)
            {
                <tr>
                    <td>@candidate.Id</td>
                    <td>@candidate.FirstName</td>
                    <td>@candidate.SecondName</td>
                    <button @onclick="@(e => DeleteCandidate(candidate.Id))">Click</button>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    List<CandidateDocument> candidates;
    private string name;
    private string lastName;
    private int id;

    private async void AddCandidate()
    {
        if (name == null || lastName == null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Заполните все поля.");
        }
        else
        {
            CandidateDocument candidateDocument = new CandidateDocument();
            candidateDocument.FirstName = name;
            candidateDocument.SecondName = lastName;

            JsonContent jsonContent = JsonContent.Create(candidateDocument);
            jsonContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");
            await Http.PostAsync("api/candidates", jsonContent);

            candidates = new();
            candidates = await Http.GetFromJsonAsync<List<CandidateDocument>>("api/candidates/query");
            StateHasChanged();
        }
    }

    private async void DeleteCandidate(Guid id)
    {
        await Http.DeleteAsync("api/candidates/" + id);
        candidates = new();
        candidates = await Http.GetFromJsonAsync<List<CandidateDocument>>("api/candidates/query");
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        candidates = new();
        candidates = await Http.GetFromJsonAsync<List<CandidateDocument>>("api/candidates/query");
    }
}
