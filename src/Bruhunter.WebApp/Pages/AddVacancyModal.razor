@using Bruhunter.Shared
@using Bruhunter.Shared.Documents
@using System.Net.Http.Headers

@inject HttpClient Http
@inject IJSRuntime JsRuntime

<div class="simple-form">
    <div class="form-group">
        <label>Добавление вакансии</label>
    </div>

    <EditForm Model="@vacancyDocument">
        <div class="form-group">
            <label for="title">Наименование вакансии</label>
            <input @bind="@vacancyDocument.Title" type="text" class="form-control" id="title" />
        </div>

        <div class="form-group">
            <label for="second-name">Адрес</label>
            <input @bind="@vacancyDocument.Address" type="text" class="form-control" id="address" />
        </div>

        <div class="form-group">
            <label for="description">Описание</label>
            <input @bind="@vacancyDocument.Description" type="text" class="form-control" id="description" />
        </div>
        <div class="form-group">
            <label for="job-closing-date">Планируемая дата закрытия вакансии</label>
            <InputDate @bind-Value="vacancyDocument.JobClosingDate" class="form-control" />
        </div>
    </EditForm>

    <button @onclick="ValidateInput" class="btn btn-primary">Добавить</button>
    <button @onclick="CandidateModal.CancelAsync" class="btn btn-secondary">Отменить</button>
</div>

@code
{
    private VacancyDocument vacancyDocument = new VacancyDocument();

    [CascadingParameter] private BlazoredModalInstance CandidateModal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        vacancyDocument.JobClosingDate = DateTime.Today;
    }

    async Task ValidateInput()
    {
        if (vacancyDocument.Address == null ||
            vacancyDocument.Description == null ||
            vacancyDocument.Title == null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Необходимо заполнить все поля");
        }
        else if (vacancyDocument.JobClosingDate < DateTime.Today)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Указана устаревшая дата планируемой даты закрытия вакансии");
        }
        else
        {
            AddVacancy();
        }
    }

    async Task AddVacancy()
    {
        var jsonContent = JsonContent.Create(vacancyDocument, new MediaTypeHeaderValue("application/json"));

        await Http.PostAsync("api/vacancies", jsonContent);
        await CandidateModal.CloseAsync(ModalResult.Ok<VacancyDocument>(vacancyDocument));
    }
}
